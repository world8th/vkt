#version 460 core
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

layout ( set = 0, binding = 3 ) uniform accelerationStructureNV Scene;
layout ( rgba32f, binding = 2 ) uniform image2D outputImage;

struct RayPayload {
    vec2 UV;
    float depth;
    uint index;
    uvec4 mdata;
};

layout ( location = 0 ) rayPayloadNV RayPayload PrimaryRay;

const float PHI = 1.61803398874989484820459 * 00000.1; // Golden Ratio   
const float PI  = 3.14159265358979323846264 * 00000.1; // PI
const float SQ2 = 1.41421356237309504880169 * 10000.0; // Square Root of Two

float gold_noise(in vec2 coordinate, in float seed){
    return fract(tan(distance(coordinate*(seed+PHI), vec2(PHI, PI)))*SQ2);
}

const float PIh = 3.14159265358979323846264*2.0;
const float BLUR_RADIUS = 20.f;

const vec4 shapeColors[2] = {vec4(0.1f,0.6f,0.1f,0.6f), vec4(0.6f,0.1f,0.1f,0.6f)};

void main() {
    // Hi-DPI adaptation
    const vec2 curPixel = vec2(gl_LaunchIDNV.xy) + 0.5f;
    const vec2 sizPixel = vec2(gl_LaunchSizeNV.xy);

    // TRUE SPACE
    const vec2 canvasSize = vec2(360.f*(sizPixel.x/sizPixel.y), 360.f);



    vec3 direction = vec3(0.f,0.f,1.f); // like a normal mapping
    vec3 origin = vec3(curPixel/sizPixel*canvasSize, 0.f); // no corrected currently
    //vec3 origin = vec3(curPixel, 0.f);
    vec3 color = vec3(1.f,1.f,1.f);
    vec3 accumulation = vec3(0.f,0.f,0.f);

    for (int i=0;i<16;i++) {
        traceNV(Scene, gl_RayFlagsOpaqueNV,
                 0xFF,
                 0,
                 1,
                 0,
                 origin,
                 0.0001f,
                 direction,
                 100.f,
                 0);

        // move by depth, and bit-shift for correction
        origin.xyz = fma(PrimaryRay.depth.xxx, direction.xyz, origin.xyz), origin.z += 0.0002f;

        // currently debug only
        if (PrimaryRay.index != 0xFFFFFFFF) {

            // colors by instance
            const vec4 shapeColor = shapeColors[PrimaryRay.mdata[0]];

            // normal blending
            accumulation += color.xyz*shapeColor.w*shapeColor.xyz;
            color *= 1.f-shapeColor.w;
            
            // BLUENT DESIGN
            vec2 randev = vec2(gold_noise(curPixel.xy, 1.f), gold_noise(curPixel.xy, 2.f));
            vec2 offset = vec2(cos(randev.y*PIh),sin(randev.y*PIh))*(BLUR_RADIUS*randev.x);
            origin.xy += offset;

            // multiply blending
            //color *= shapeColor.w*shapeColor.xyz + (1.f-shapeColor.w);
        } else {
            const vec4 bgColor = vec4(1.f,1.f,1.f,1.f);
            accumulation += bgColor.xyz*color.xyz;
            break;
        }
    }

    imageStore(outputImage, ivec2(gl_LaunchIDNV.xy), vec4(accumulation,1.f));
}
